service: relaybox-auth

plugins:
  - serverless-dotenv-plugin
  - serverless-esbuild
  - serverless-plugin-canary-deployments
  - serverless-plugin-utils
  - serverless-offline
  - serverless-domain-manager

useDotenv: true

custom:
  esbuild:
    bundle: true
    minify: true

  customDomain:
    domainName: auth.${self:provider.stage}.relaybox-services.net
    stage: ${self:provider.stage}
    certificateName: '*.${self:provider.stage}.relaybox-services.net'
    createRoute53Record: true
    createRoute53IPv6Record: true
    endpointType: edge
    securityPolicy: tls_1_2
    apiType: rest
    autoDomain: true

  serverless-offline:
    httpPort: 4005
    lambdaPort: 3005
    reloadHandler: true

  deploymentSettings:
    type: AllAtOnce
    alias: live
    preTrafficHook: pre-traffic

  keepAlive:
    eventBridge:
      schedule: rate(5 minutes)
      enabled: true
      input:
        keepAlive: true

  cors:
    origin: '*'
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Ds-Client-Id
      - X-Ds-Connection-Id
    allowCredentials: true

  vars:
    ALLOWED_ORIGINS: ${env:ALLOWED_ORIGINS, ''}
    AWS_ACCOUNT_ID: ${env:AWS_ACCOUNT_ID, ''}
    DB_HOST: ${env:DB_HOST, ''}
    DB_NAME: ${env:DB_NAME, ''}
    DB_PORT: ${env:DB_PORT, ''}
    DB_USERNAME: ${env:DB_USERNAME, ''}
    DB_PASSWORD: ${env:DB_PASSWORD, ''}
    DB_PROXY_ENABLED: ${env:DB_PROXY_ENABLED, ''}
    DB_TLS_DISABLED: ${env:DB_TLS_DISABLED, ''}
    LOG_LEVEL: ${env:LOG_LEVEL, ''}
    VPC_SECURITY_GROUP_IDS: ${env:VPC_SECURITY_GROUP_IDS, ''}
    VPC_SUBNET_IDS: ${env:VPC_SUBNET_IDS, ''}

provider:
  name: aws
  runtime: nodejs20.x
  memorySize: 3008
  environment: ${self:custom.vars}
  stage: ${opt:stage, env:STAGE, 'dev'}
  timeout: 300
  apiGateway:
    binaryMediaTypes:
      - multipart/form-data
  deploymentBucket:
    name: ${self:service}.${self:provider.stage}.sls-deploys
    maxPreviousDeploymentArtifacts: 10
    blockPublicAccess: true
    serverSideEncryption: AES256
    tags:
      Env: ${self:provider.stage}
  region: ${opt:region, 'eu-west-2'}
  logRetentionInDays: 30
  iam:
    deploymentRole: arn:aws:iam::${env:AWS_ACCOUNT_ID}:role/relaybox-${self:provider.stage}-CloudFormationExecutionRole
    role:
      statements:
        - Effect: Allow
          Action:
            - codedeploy:*
          Resource:
            - '*'
  vpc:
    securityGroupIds: ${split(${self:custom.vars.VPC_SECURITY_GROUP_IDS}, ',')}
    subnetIds: ${split(${self:custom.vars.VPC_SUBNET_IDS}, ',')}

package:
  individually: true

variablesResolutionMode: 20210326

functions:
  get-validate-token:
    handler: src/handlers/get-validate-token.handler
    timeout: 30
    events:
      - ${self:custom.keepAlive}
      - http:
          path: /validate-token
          method: get
          cors: ${self:custom.cors}

  get-validate-api-key:
    handler: src/handlers/get-validate-api-key.handler
    timeout: 30
    events:
      - ${self:custom.keepAlive}
      - http:
          path: /validate-api-key
          method: get
          cors: ${self:custom.cors}

  get-credentials:
    handler: src/handlers/get-credentials.handler
    timeout: 30
    events:
      - ${self:custom.keepAlive}
      - http:
          path: /credentials
          method: get
          cors: ${self:custom.cors}
